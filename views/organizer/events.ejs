<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Organizer Dashboard</title>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <link rel="stylesheet" href="/css/admin-dashboard.css" />
    <link rel="icon" href="/images/goevents5.png" type="image/x-icon" />

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <style>
      .notifications {
        width: 300px;
        height: 0;
        opacity: 0;
        position: absolute;
        top: 63px;
        right: 62px;
        border-radius: 5px 0px 5px 5px;
        background-color: #fff;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
          0 6px 20px 0 rgba(0, 0, 0, 0.19);
        z-index: 999;
        overflow: hidden;
        transition: height 0.3s, opacity 0.3s;
      }

      .notifications.open {
        height: auto;
        opacity: 1;
      }

      .notifications h2 {
        font-size: 14px;
        padding: 10px;
        border-bottom: 1px solid #eee;
        color: #999;
      }

      .notifications-item {
        display: flex;
        border-bottom: 1px solid #eee;
        padding: 6px 9px;
        margin-bottom: 0px;
        cursor: pointer;
      }

      .notifications-item:hover {
        background-color: #eee;
      }

      .notifications-item .text h4 {
        color: #777;
        font-size: 16px;
        margin-top: 3px;
      }

      .notifications-item .text p {
        color: #aaa;
        font-size: 12px;
      }

      .icon {
        cursor: pointer;
        position: relative;
      }

      .icon img {
        width: 26px;
      }

      .icon span {
        background: #f00;
        padding: 5px;
        border-radius: 50%;
        color: #fff;
        position: absolute;
        top: -5px;
        right: -10px;
        font-size: 12px;
      }
    </style>
  </head>
  <body>
    <div class="wrapper">
      <nav id="sidebar">
        <div class="sidebar-header">
          <h3>Organizer Panel</h3>
        </div>
        <ul class="list-unstyled components">
          <li><a href="/organizer/dashboard">Dashboard</a></li>
          <li><a href="/organizer/events">My Events</a></li>
          <li><a href="/organizer/registrations">Registrations</a></li>
        </ul>
      </nav>

      <div id="content">
        <nav class="navbar navbar-expand-lg navbar-light">
          <div class="container-fluid">
            <div class="navbar-nav ml-auto">
              <div class="nav-item dropdown">
                <div class="icon" id="bell">
                  <img src="/images/bell.png" alt="notification-icon" />
                  <span id="notif-count">0</span>
                </div>
              </div>
              <div class="nav-item dropdown">
                <a
                  class="nav-link dropdown-toggle"
                  href="#"
                  id="navbarDropdown"
                  role="button"
                  data-toggle="dropdown"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  Account
                </a>
                <div
                  class="dropdown-menu dropdown-menu-right"
                  aria-labelledby="navbarDropdown"
                >
                  <a class="dropdown-item" href="/organizer/profile">My Profile</a>
                  <a class="dropdown-item" href="/logout">Logout</a>
                  <button id="dark-mode-toggle" class="dropdown-item">
                    Toggle Dark Mode
                  </button>
                </div>
              </div>
            </div>
          </div>
        </nav>

        <div class="notifications" id="notification-box">
          <h2>Notifications</h2>
          <div id="notification-list">
          </div>
        </div>

        <div class="container mt-4">
          <div class="d-flex justify-content-between align-items-center">
            <h2>Your Events</h2>
            <a href="/organizer/events/create" class="btn btn-success"
              >Create New Event</a
            >
          </div>

          <table class="table table-striped mt-4">
            <thead>
              <tr>
                <th>ID</th>
                <th>Event Name</th>
                <th>Date</th>
                <th>Category</th>
                <th>Location</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% events.forEach(event => { %>
              <tr>
                <td><%= event.id %></td>
                <td><%= event.name %></td>
                <td><%= new Date(event.date).toLocaleDateString() %></td>
                <td><%= event.category %></td>
                <td><%= event.location_name %></td>
                <td>
                  <a
                    href="/organizer/events/<%= event.id %>/edit"
                    class="btn btn-primary btn-sm"
                    >Edit</a
                  >
                  <button
                    class="btn btn-danger btn-sm"
                    onclick="deleteEvent(<%= event.id %>)"
                  >
                    Delete
                  </button>
                </td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const darkModeToggle = document.getElementById("dark-mode-toggle");

        darkModeToggle.addEventListener("click", function () {
          document.body.classList.toggle("dark-mode");

          const isDarkMode = document.body.classList.contains("dark-mode");
          localStorage.setItem("darkMode", isDarkMode);
        });

        if (localStorage.getItem("darkMode") === "true") {
          document.body.classList.add("dark-mode");
        }

        const bellIcon = document.getElementById("bell");
        const notificationBox = document.getElementById("notification-box");
        let notificationsVisible = false;

        bellIcon.addEventListener("click", () => {
          notificationsVisible = !notificationsVisible;
          notificationBox.classList.toggle("open", notificationsVisible);
        });

        function fetchNotifications() {
          fetch("/organizer/notifications")
            .then((response) => response.json())
            .then((data) => {
              const notificationList =
                document.getElementById("notification-list");
              notificationList.innerHTML = "";

              if (data.notifications.length > 0) {
                document.getElementById("notif-count").textContent =
                  data.notifications.length;

                data.notifications.forEach((notification) => {
                  const div = document.createElement("div");
                  div.classList.add("notifications-item");

                  const textDiv = document.createElement("div");
                  textDiv.classList.add("text");

                  const title = document.createElement("h4");
                  title.textContent = notification.title;
                  const message = document.createElement("p");
                  message.textContent = notification.message;

                  textDiv.appendChild(title);
                  textDiv.appendChild(message);
                  div.appendChild(textDiv);

                  div.addEventListener("click", () => {
                    markNotificationAsRead(notification.id, div);
                  });

                  notificationList.appendChild(div);
                });
              } else {
                document.getElementById("notif-count").textContent = "0";
                const noNotif = document.createElement("p");
                noNotif.textContent = "";
                notificationList.appendChild(noNotif);
              }
            })
            .catch((error) =>
              console.error("Error fetching notifications:", error)
            );
        }

        function markNotificationAsRead(notificationId, notificationItem) {
          fetch(`/organizer/notifications/${notificationId}/read`, {
            method: "POST",
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                notificationItem.remove();

                const notificationCountElement = document.getElementById(
                  "notif-count"
                );
                const currentCount = parseInt(
                  notificationCountElement.textContent,
                  10
                );
                const newCount = currentCount - 1;
                notificationCountElement.textContent = newCount;
              }
            })
            .catch((error) =>
              console.error("Error marking notification as read:", error)
            );
        }

        setInterval(fetchNotifications, 10000);
        fetchNotifications(); 
      });
    </script>
  </body>
</html>
